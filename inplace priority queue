public class Solution {

    public static void inplaceHeapSort(int arr[]) {
        // Build the max heap
        buildMaxHeap(arr);

        // Extract elements from the heap and place them at the end of the array
        int n = arr.length;
        for (int i = n - 1; i > 0; i--) {
            // Move current root (maximum) to the end
            swap(arr, 0, i);

            // Call max heapify on the reduced heap
            maxHeapify(arr, i, 0);
        }
    }

    private static void buildMaxHeap(int arr[]) {
        int n = arr.length;

        // Start from the last non-leaf node and heapify all the nodes in reverse order
        for (int i = (n / 2) - 1; i >= 0; i--) {
            maxHeapify(arr, n, i);
        }
    }

    private static void maxHeapify(int arr[], int heapSize, int i) {
        int largest = i;
        int leftChild = 2 * i + 1;
        int rightChild = 2 * i + 2;

        // Find the largest element among the root, left child, and right child
        if (leftChild < heapSize && arr[leftChild] > arr[largest]) {
            largest = leftChild;
        }

        if (rightChild < heapSize && arr[rightChild] > arr[largest]) {
            largest = rightChild;
        }

        // If the largest element is not the root, swap it with the root and continue heapifying
        if (largest != i) {
            swap(arr, i, largest);
            maxHeapify(arr, heapSize, largest);
        }
    }

    private static void swap(int arr[], int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int[] arr = { 1, 2, 3, 4, 5, 6 };
        inplaceHeapSort(arr);

        // Print the sorted array (descending order)
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

